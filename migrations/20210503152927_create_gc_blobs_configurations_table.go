package migrations

import migrate "github.com/rubenv/sql-migrate"

func init() {
	m := &Migration{
		Migration: &migrate.Migration{
			Id: "20210503152927_create_gc_blobs_configurations_table",
			Up: []string{
				`CREATE TABLE IF NOT EXISTS gc_blobs_configurations (
					id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
					namespace_id bigint NOT NULL,
					repository_id bigint NOT NULL,
					manifest_id bigint NOT NULL,
					digest bytea NOT NULL,
					CONSTRAINT pk_gc_blobs_configurations PRIMARY KEY (digest, id),
					CONSTRAINT fk_gc_blobs_configurations_nmspc_id_dgst_rpstry_id_m_id_mnfsts FOREIGN KEY (namespace_id, digest, repository_id, manifest_id) REFERENCES manifests (namespace_id, configuration_blob_digest, repository_id, id) ON DELETE CASCADE,
					CONSTRAINT fk_gc_blobs_configurations_digest_blobs FOREIGN KEY (digest) REFERENCES blobs (digest) ON DELETE CASCADE,
					CONSTRAINT unique_gc_blobs_configurations_digest_and_manifest_id UNIQUE (digest, manifest_id)
				)
				PARTITION BY HASH (digest)`,
				"CREATE INDEX IF NOT EXISTS index_gc_blobs_configurations_on_nmspc_id_dgst_rpstry_id_mft_id ON gc_blobs_configurations USING btree (namespace_id, digest, repository_id, manifest_id)",
			},
			Down: []string{
				"DROP INDEX IF EXISTS index_gc_blobs_configurations_on_nmspc_id_dgst_rpstry_id_mft_id CASCADE",
				"DROP TABLE IF EXISTS gc_blobs_configurations CASCADE",
			},
		},
		PostDeployment: false,
	}

	allMigrations = append(allMigrations, m)
}
