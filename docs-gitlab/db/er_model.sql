-- Database creation must be done outside a multicommand file.
-- These commands were put in this file only as a convenience.
-- -- object: registry | type: DATABASE --
-- -- DROP DATABASE IF EXISTS registry;
-- CREATE DATABASE registry
-- 	ENCODING = 'UTF8'
-- 	LC_COLLATE = 'en_US.UTF-8'
-- 	LC_CTYPE = 'en_US.UTF-8'
-- 	TABLESPACE = pg_default
-- 	OWNER = postgres;
-- -- ddl-end --
-- 

-- object: public.repositories | type: TABLE --
-- DROP TABLE IF EXISTS public.repositories CASCADE;
CREATE TABLE public.repositories (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	parent_id bigint,
	created_at timestamp with time zone NOT NULL DEFAULT now(),
	updated_at timestamp with time zone,
	name text NOT NULL,
	path text NOT NULL,
	CONSTRAINT pk_repositories PRIMARY KEY (id),
	CONSTRAINT uq_repositories_path UNIQUE (path),
	CONSTRAINT ck_repositories_name_length CHECK ((char_length(name) <= 255)),
	CONSTRAINT ck_repositories_path_length CHECK ((char_length(path) <= 255))

);
-- ddl-end --
-- ALTER TABLE public.repositories OWNER TO postgres;
-- ddl-end --

-- object: public.manifest_configurations | type: TABLE --
-- DROP TABLE IF EXISTS public.manifest_configurations CASCADE;
CREATE TABLE public.manifest_configurations (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	manifest_id bigint NOT NULL,
	blob_id bigint NOT NULL,
	created_at timestamp with time zone NOT NULL DEFAULT now(),
	payload bytea NOT NULL,
	CONSTRAINT pk_manifest_configurations PRIMARY KEY (id),
	CONSTRAINT uq_manifest_configurations_manifest_id UNIQUE (manifest_id),
	CONSTRAINT uq_manifest_configurations_blob_id UNIQUE (blob_id)

);
-- ddl-end --
-- ALTER TABLE public.manifest_configurations OWNER TO postgres;
-- ddl-end --

-- object: public.manifests | type: TABLE --
-- DROP TABLE IF EXISTS public.manifests CASCADE;
CREATE TABLE public.manifests (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	created_at timestamp with time zone NOT NULL DEFAULT now(),
	marked_at timestamp with time zone,
	schema_version integer NOT NULL,
	digest_algorithm smallint NOT NULL,
	digest_hex bytea NOT NULL,
	payload bytea NOT NULL,
	media_type text NOT NULL,
	CONSTRAINT pk_manifests PRIMARY KEY (id),
	CONSTRAINT uq_manifests_digest_algorithm_digest_hex UNIQUE (digest_algorithm,digest_hex),
	CONSTRAINT ck_manifests_media_type_enum CHECK (((media_type IN ('application/vnd.oci.image.manifest.v1+json', 
					'application/vnd.docker.distribution.manifest.v1+json',
					'application/vnd.docker.distribution.manifest.v1+prettyjws',
					'application/vnd.docker.distribution.manifest.v2+json'
)))),
	CONSTRAINT ck_manifests_digest_algorithm_enum CHECK ((digest_algorithm IN (1, 2)))

);
-- ddl-end --
-- ALTER TABLE public.manifests OWNER TO postgres;
-- ddl-end --

-- object: public.blobs | type: TABLE --
-- DROP TABLE IF EXISTS public.blobs CASCADE;
CREATE TABLE public.blobs (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	size bigint NOT NULL,
	created_at timestamp with time zone NOT NULL DEFAULT now(),
	marked_at timestamp with time zone,
	digest_algorithm smallint NOT NULL,
	digest_hex bytea NOT NULL,
	media_type text NOT NULL,
	CONSTRAINT pk_blobs PRIMARY KEY (id),
	CONSTRAINT uq_blobs_digest_algorithm_digest_hex UNIQUE (digest_algorithm,digest_hex),
	CONSTRAINT ck_blobs_media_type_enum CHECK (((media_type IN (
					'application/vnd.oci.image.layer.v1.tar',
					'application/vnd.oci.image.layer.v1.tar+gzip',
					'application/vnd.oci.image.layer.v1.tar+zstd',
					'application/vnd.docker.container.image.rootfs.diff+x-gtar',
					'application/vnd.docker.image.rootfs.diff.tar',
					'application/vnd.docker.image.rootfs.diff.tar.gzip',
					'application/vnd.docker.image.rootfs.foreign.diff.tar.gzip',
					'application/vnd.oci.image.config.v1+json',
					'application/vnd.docker.container.image.v1+json',
					'application/vnd.docker.plugin.v1+json'
				)))),
	CONSTRAINT ck_blobs_digest_algorithm_enum CHECK ((digest_algorithm IN (1, 2)))

);
-- ddl-end --
-- ALTER TABLE public.blobs OWNER TO postgres;
-- ddl-end --

-- object: public.manifest_layers | type: TABLE --
-- DROP TABLE IF EXISTS public.manifest_layers CASCADE;
CREATE TABLE public.manifest_layers (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	manifest_id bigint NOT NULL,
	blob_id bigint NOT NULL,
	created_at timestamp with time zone NOT NULL DEFAULT now(),
	CONSTRAINT pk_manifest_layers PRIMARY KEY (id),
	CONSTRAINT uq_manifest_layers_manifest_id_blob_id UNIQUE (manifest_id,blob_id)

);
-- ddl-end --
-- ALTER TABLE public.manifest_layers OWNER TO postgres;
-- ddl-end --

-- object: public.manifest_lists | type: TABLE --
-- DROP TABLE IF EXISTS public.manifest_lists CASCADE;
CREATE TABLE public.manifest_lists (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	created_at timestamp with time zone NOT NULL DEFAULT now(),
	marked_at timestamp with time zone,
	schema_version integer NOT NULL,
	digest_algorithm smallint NOT NULL,
	digest_hex bytea NOT NULL,
	payload bytea NOT NULL,
	media_type text NOT NULL,
	CONSTRAINT pk_manifest_lists PRIMARY KEY (id),
	CONSTRAINT uq_manifest_lists_digest_algorithm_digest_hex UNIQUE (digest_algorithm,digest_hex),
	CONSTRAINT ck_manifest_lists_media_type_enum CHECK (((media_type IN ('application/vnd.oci.image.index.v1+json', 'application/vnd.docker.distribution.manifest.list.v2+json')))),
	CONSTRAINT ck_manifest_lists_digest_algorithm_enum CHECK ((digest_algorithm IN (1, 2)))

);
-- ddl-end --
-- ALTER TABLE public.manifest_lists OWNER TO postgres;
-- ddl-end --

-- object: public.manifest_list_manifests | type: TABLE --
-- DROP TABLE IF EXISTS public.manifest_list_manifests CASCADE;
CREATE TABLE public.manifest_list_manifests (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	manifest_list_id bigint NOT NULL,
	manifest_id bigint NOT NULL,
	created_at timestamp with time zone NOT NULL DEFAULT now(),
	CONSTRAINT pk_manifest_list_manifests PRIMARY KEY (id),
	CONSTRAINT uq_manifest_list_manifests_manifest_list_id_manifest_id UNIQUE (manifest_list_id,manifest_id)

);
-- ddl-end --
-- ALTER TABLE public.manifest_list_manifests OWNER TO postgres;
-- ddl-end --

-- object: public.tags | type: TABLE --
-- DROP TABLE IF EXISTS public.tags CASCADE;
CREATE TABLE public.tags (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	repository_id bigint NOT NULL,
	manifest_id bigint,
	manifest_list_id bigint,
	created_at timestamp with time zone NOT NULL DEFAULT now(),
	updated_at timestamp with time zone,
	name text NOT NULL,
	CONSTRAINT pk_tags PRIMARY KEY (id),
	CONSTRAINT uq_tags_name_repository_id UNIQUE (name,repository_id),
	CONSTRAINT ck_tags_name_length CHECK ((char_length(name) <= 255)),
	CONSTRAINT ck_tags_manifest_id_manifest_list_id_one_of CHECK (((manifest_id is not null and manifest_list_id is null) or (manifest_id is null and manifest_list_id is not null)))

);
-- ddl-end --
-- ALTER TABLE public.tags OWNER TO postgres;
-- ddl-end --

-- object: public.repository_manifests | type: TABLE --
-- DROP TABLE IF EXISTS public.repository_manifests CASCADE;
CREATE TABLE public.repository_manifests (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	repository_id bigint NOT NULL,
	manifest_id bigint NOT NULL,
	created_at timestamp with time zone NOT NULL DEFAULT now(),
	CONSTRAINT pk_repository_manifests PRIMARY KEY (id),
	CONSTRAINT uq_repository_manifests_repository_id_manifest_id UNIQUE (repository_id,manifest_id)

);
-- ddl-end --
-- ALTER TABLE public.repository_manifests OWNER TO postgres;
-- ddl-end --

-- object: public.repository_manifest_lists | type: TABLE --
-- DROP TABLE IF EXISTS public.repository_manifest_lists CASCADE;
CREATE TABLE public.repository_manifest_lists (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	repository_id bigint NOT NULL,
	manifest_list_id bigint NOT NULL,
	created_at timestamp with time zone NOT NULL DEFAULT now(),
	CONSTRAINT pk_repository_manifest_lists PRIMARY KEY (id),
	CONSTRAINT uq_repository_manifests_repository_id_manifest_list_id UNIQUE (repository_id,manifest_list_id)

);
-- ddl-end --
-- ALTER TABLE public.repository_manifest_lists OWNER TO postgres;
-- ddl-end --

-- object: ix_tags_repository_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_tags_repository_id CASCADE;
CREATE INDEX ix_tags_repository_id ON public.tags
	USING btree
	(
	  repository_id
	);
-- ddl-end --

-- object: ix_tags_manifest_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_tags_manifest_id CASCADE;
CREATE INDEX ix_tags_manifest_id ON public.tags
	USING btree
	(
	  manifest_id
	);
-- ddl-end --

-- object: ix_repositories_parent_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_repositories_parent_id CASCADE;
CREATE INDEX ix_repositories_parent_id ON public.repositories
	USING btree
	(
	  parent_id
	);
-- ddl-end --

-- object: ix_manifest_layers_manifest_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_manifest_layers_manifest_id CASCADE;
CREATE INDEX ix_manifest_layers_manifest_id ON public.manifest_layers
	USING btree
	(
	  manifest_id
	);
-- ddl-end --

-- object: ix_manifest_layers_blob_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_manifest_layers_blob_id CASCADE;
CREATE INDEX ix_manifest_layers_blob_id ON public.manifest_layers
	USING btree
	(
	  blob_id
	);
-- ddl-end --

-- object: ix_manifest_list_manifests_manifest_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_manifest_list_manifests_manifest_id CASCADE;
CREATE INDEX ix_manifest_list_manifests_manifest_id ON public.manifest_list_manifests
	USING btree
	(
	  manifest_id
	);
-- ddl-end --

-- object: ix_manifest_list_manifests_manifest_list_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_manifest_list_manifests_manifest_list_id CASCADE;
CREATE INDEX ix_manifest_list_manifests_manifest_list_id ON public.manifest_list_manifests
	USING btree
	(
	  manifest_list_id
	);
-- ddl-end --

-- object: ix_tags_manifest_list_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_tags_manifest_list_id CASCADE;
CREATE INDEX ix_tags_manifest_list_id ON public.tags
	USING btree
	(
	  manifest_list_id
	);
-- ddl-end --

-- object: ix_repository_manifests_repository_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_repository_manifests_repository_id CASCADE;
CREATE INDEX ix_repository_manifests_repository_id ON public.repository_manifests
	USING btree
	(
	  repository_id
	);
-- ddl-end --

-- object: ix_repository_manifests_manifest_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_repository_manifests_manifest_id CASCADE;
CREATE INDEX ix_repository_manifests_manifest_id ON public.repository_manifests
	USING btree
	(
	  manifest_id
	);
-- ddl-end --

-- object: ix_repository_manifest_lists_repository_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_repository_manifest_lists_repository_id CASCADE;
CREATE INDEX ix_repository_manifest_lists_repository_id ON public.repository_manifest_lists
	USING btree
	(
	  repository_id
	);
-- ddl-end --

-- object: ix_repository_manifest_lists_manifest_list_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_repository_manifest_lists_manifest_list_id CASCADE;
CREATE INDEX ix_repository_manifest_lists_manifest_list_id ON public.repository_manifest_lists
	USING btree
	(
	  manifest_list_id
	);
-- ddl-end --

-- object: public.repository_blobs | type: TABLE --
-- DROP TABLE IF EXISTS public.repository_blobs CASCADE;
CREATE TABLE public.repository_blobs (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	repository_id bigint NOT NULL,
	blob_id bigint NOT NULL,
	created_at timestamp with time zone NOT NULL DEFAULT now(),
	CONSTRAINT pk_repository_blobs PRIMARY KEY (id),
	CONSTRAINT uq_repository_blobs_repository_id_blob_id UNIQUE (repository_id,blob_id)

);
-- ddl-end --
-- ALTER TABLE public.repository_blobs OWNER TO postgres;
-- ddl-end --

-- object: ix_repository_blobs_repository_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_repository_blobs_repository_id CASCADE;
CREATE INDEX ix_repository_blobs_repository_id ON public.repository_blobs
	USING btree
	(
	  repository_id
	);
-- ddl-end --

-- object: ix_repository_blobs_blob_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_repository_blobs_blob_id CASCADE;
CREATE INDEX ix_repository_blobs_blob_id ON public.repository_blobs
	USING btree
	(
	  blob_id
	);
-- ddl-end --

-- object: ix_manifest_configurations_manifest_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_manifest_configurations_manifest_id CASCADE;
CREATE INDEX ix_manifest_configurations_manifest_id ON public.manifest_configurations
	USING btree
	(
	  manifest_id
	);
-- ddl-end --

-- object: ix_manifest_configurations_blob_id | type: INDEX --
-- DROP INDEX IF EXISTS public.ix_manifest_configurations_blob_id CASCADE;
CREATE INDEX ix_manifest_configurations_blob_id ON public.manifest_configurations
	USING btree
	(
	  blob_id
	);
-- ddl-end --

-- object: fk_repositories_parent_id_repositories | type: CONSTRAINT --
-- ALTER TABLE public.repositories DROP CONSTRAINT IF EXISTS fk_repositories_parent_id_repositories CASCADE;
ALTER TABLE public.repositories ADD CONSTRAINT fk_repositories_parent_id_repositories FOREIGN KEY (parent_id)
REFERENCES public.repositories (id) MATCH SIMPLE
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_manifest_configurations_manifest_id_manifests | type: CONSTRAINT --
-- ALTER TABLE public.manifest_configurations DROP CONSTRAINT IF EXISTS fk_manifest_configurations_manifest_id_manifests CASCADE;
ALTER TABLE public.manifest_configurations ADD CONSTRAINT fk_manifest_configurations_manifest_id_manifests FOREIGN KEY (manifest_id)
REFERENCES public.manifests (id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_manifest_configurations_blob_id_blobs | type: CONSTRAINT --
-- ALTER TABLE public.manifest_configurations DROP CONSTRAINT IF EXISTS fk_manifest_configurations_blob_id_blobs CASCADE;
ALTER TABLE public.manifest_configurations ADD CONSTRAINT fk_manifest_configurations_blob_id_blobs FOREIGN KEY (blob_id)
REFERENCES public.blobs (id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_manifest_layers_manifest_id_manifests | type: CONSTRAINT --
-- ALTER TABLE public.manifest_layers DROP CONSTRAINT IF EXISTS fk_manifest_layers_manifest_id_manifests CASCADE;
ALTER TABLE public.manifest_layers ADD CONSTRAINT fk_manifest_layers_manifest_id_manifests FOREIGN KEY (manifest_id)
REFERENCES public.manifests (id) MATCH SIMPLE
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_manifest_layers_blob_id_blobs | type: CONSTRAINT --
-- ALTER TABLE public.manifest_layers DROP CONSTRAINT IF EXISTS fk_manifest_layers_blob_id_blobs CASCADE;
ALTER TABLE public.manifest_layers ADD CONSTRAINT fk_manifest_layers_blob_id_blobs FOREIGN KEY (blob_id)
REFERENCES public.blobs (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_manifest_list_manifests_manifest_id_manifests | type: CONSTRAINT --
-- ALTER TABLE public.manifest_list_manifests DROP CONSTRAINT IF EXISTS fk_manifest_list_manifests_manifest_id_manifests CASCADE;
ALTER TABLE public.manifest_list_manifests ADD CONSTRAINT fk_manifest_list_manifests_manifest_id_manifests FOREIGN KEY (manifest_id)
REFERENCES public.manifests (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_manifest_list_manifests_manifest_list_id_manifest_lists | type: CONSTRAINT --
-- ALTER TABLE public.manifest_list_manifests DROP CONSTRAINT IF EXISTS fk_manifest_list_manifests_manifest_list_id_manifest_lists CASCADE;
ALTER TABLE public.manifest_list_manifests ADD CONSTRAINT fk_manifest_list_manifests_manifest_list_id_manifest_lists FOREIGN KEY (manifest_list_id)
REFERENCES public.manifest_lists (id) MATCH SIMPLE
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tags_repository_id_repositories | type: CONSTRAINT --
-- ALTER TABLE public.tags DROP CONSTRAINT IF EXISTS fk_tags_repository_id_repositories CASCADE;
ALTER TABLE public.tags ADD CONSTRAINT fk_tags_repository_id_repositories FOREIGN KEY (repository_id)
REFERENCES public.repositories (id) MATCH SIMPLE
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tags_manifest_id_manifests | type: CONSTRAINT --
-- ALTER TABLE public.tags DROP CONSTRAINT IF EXISTS fk_tags_manifest_id_manifests CASCADE;
ALTER TABLE public.tags ADD CONSTRAINT fk_tags_manifest_id_manifests FOREIGN KEY (manifest_id)
REFERENCES public.manifests (id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tags_manifest_list_id_manifest_lists | type: CONSTRAINT --
-- ALTER TABLE public.tags DROP CONSTRAINT IF EXISTS fk_tags_manifest_list_id_manifest_lists CASCADE;
ALTER TABLE public.tags ADD CONSTRAINT fk_tags_manifest_list_id_manifest_lists FOREIGN KEY (manifest_list_id)
REFERENCES public.manifest_lists (id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_repository_manifests_repository_id_repositories | type: CONSTRAINT --
-- ALTER TABLE public.repository_manifests DROP CONSTRAINT IF EXISTS fk_repository_manifests_repository_id_repositories CASCADE;
ALTER TABLE public.repository_manifests ADD CONSTRAINT fk_repository_manifests_repository_id_repositories FOREIGN KEY (repository_id)
REFERENCES public.repositories (id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_repository_manifests_manifest_id_manifests | type: CONSTRAINT --
-- ALTER TABLE public.repository_manifests DROP CONSTRAINT IF EXISTS fk_repository_manifests_manifest_id_manifests CASCADE;
ALTER TABLE public.repository_manifests ADD CONSTRAINT fk_repository_manifests_manifest_id_manifests FOREIGN KEY (manifest_id)
REFERENCES public.manifests (id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_repository_manifest_lists_repository_id_repositories | type: CONSTRAINT --
-- ALTER TABLE public.repository_manifest_lists DROP CONSTRAINT IF EXISTS fk_repository_manifest_lists_repository_id_repositories CASCADE;
ALTER TABLE public.repository_manifest_lists ADD CONSTRAINT fk_repository_manifest_lists_repository_id_repositories FOREIGN KEY (repository_id)
REFERENCES public.repositories (id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_repository_manifest_lists_manifest_list_id_manifest_lists | type: CONSTRAINT --
-- ALTER TABLE public.repository_manifest_lists DROP CONSTRAINT IF EXISTS fk_repository_manifest_lists_manifest_list_id_manifest_lists CASCADE;
ALTER TABLE public.repository_manifest_lists ADD CONSTRAINT fk_repository_manifest_lists_manifest_list_id_manifest_lists FOREIGN KEY (manifest_list_id)
REFERENCES public.manifest_lists (id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_repository_blobs_repository_id_repositories | type: CONSTRAINT --
-- ALTER TABLE public.repository_blobs DROP CONSTRAINT IF EXISTS fk_repository_blobs_repository_id_repositories CASCADE;
ALTER TABLE public.repository_blobs ADD CONSTRAINT fk_repository_blobs_repository_id_repositories FOREIGN KEY (repository_id)
REFERENCES public.repositories (id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_repository_blobs_blob_id_blobs | type: CONSTRAINT --
-- ALTER TABLE public.repository_blobs DROP CONSTRAINT IF EXISTS fk_repository_blobs_blob_id_blobs CASCADE;
ALTER TABLE public.repository_blobs ADD CONSTRAINT fk_repository_blobs_blob_id_blobs FOREIGN KEY (blob_id)
REFERENCES public.blobs (id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
-- ddl-end --
