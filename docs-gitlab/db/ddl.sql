CREATE TABLE repositories (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    parent_id bigint,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    updated_at timestamp WITH time zone,
    name text NOT NULL,
    path text NOT NULL,
    CONSTRAINT pk_repositories PRIMARY KEY (id),
    CONSTRAINT fk_repositories_parent_id_repositories FOREIGN KEY (parent_id) REFERENCES repositories (id) ON DELETE CASCADE,
    CONSTRAINT uq_repositories_path UNIQUE (path),
    CONSTRAINT ck_repositories_name_length CHECK ((char_length(name) <= 255)),
    CONSTRAINT ck_repositories_path_length CHECK ((char_length(path) <= 255))
);
CREATE INDEX ix_repositories_parent_id ON repositories (parent_id);

CREATE TABLE media_types (
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    media_type text NOT NULL,
    CONSTRAINT pk_media_types PRIMARY KEY (id),
    CONSTRAINT uq_media_types_type UNIQUE (media_type),
    CONSTRAINT ck_media_types_type_length CHECK ((char_length(media_type) <= 255))
);

CREATE TABLE blobs (
    size bigint NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    media_type_id smallint NOT NULL,
    digest bytea NOT NULL,
    CONSTRAINT pk_blobs PRIMARY KEY (digest),
    CONSTRAINT fk_blobs_media_type_id_media_types FOREIGN KEY (media_type_id) REFERENCES media_types (id)
)
PARTITION BY HASH (digest);
CREATE INDEX ix_blobs_media_type_id ON blobs (media_type_id);

CREATE TABLE repository_blobs (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    repository_id bigint NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    blob_digest bytea NOT NULL,
    CONSTRAINT pk_repository_blobs PRIMARY KEY (repository_id, id),
    CONSTRAINT fk_repository_blobs_repository_id_repositories FOREIGN KEY (repository_id) REFERENCES repositories (id) ON DELETE CASCADE,
    CONSTRAINT fk_repository_blobs_blob_digest_blobs FOREIGN KEY (blob_digest) REFERENCES blobs (digest) ON DELETE CASCADE,
    CONSTRAINT uq_repository_blobs_repository_id_blob_digest UNIQUE (repository_id, blob_digest)
)
PARTITION BY HASH (repository_id);
CREATE INDEX ix_repository_blobs_repository_id ON repository_blobs (repository_id);
CREATE INDEX ix_repository_blobs_blob_digest ON repository_blobs (blob_digest);

CREATE TABLE manifests (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    repository_id bigint NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    schema_version smallint NOT NULL,
    media_type_id smallint NOT NULL,
    configuration_media_type_id smallint,
    configuration_payload bytea,
    configuration_blob_digest bytea,
    digest bytea NOT NULL,
    payload bytea NOT NULL,
    CONSTRAINT pk_manifests PRIMARY KEY (repository_id, id),
    CONSTRAINT fk_manifests_repository_id_repositories FOREIGN KEY (repository_id) REFERENCES repositories (id) ON DELETE CASCADE,
    CONSTRAINT fk_manifests_media_type_id_media_types FOREIGN KEY (media_type_id) REFERENCES media_types (id),
    CONSTRAINT fk_manifests_configuration_media_type_id_media_types FOREIGN KEY (configuration_media_type_id) REFERENCES media_types (id),
    CONSTRAINT fk_manifests_configuration_blob_digest_blobs FOREIGN KEY (configuration_blob_digest) REFERENCES blobs (digest),
    CONSTRAINT uq_manifests_repository_id_digest UNIQUE (repository_id, digest)
)
PARTITION BY HASH (repository_id);
CREATE INDEX ix_manifests_repository_id ON manifests (repository_id);
CREATE INDEX ix_manifests_media_type_id ON manifests (media_type_id);
CREATE INDEX ix_manifests_configuration_media_type_id ON manifests (configuration_media_type_id);
CREATE INDEX ix_manifests_configuration_blob_digest ON manifests (configuration_blob_digest);

CREATE TABLE manifest_references (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    repository_id bigint NOT NULL,
    parent_id bigint NOT NULL,
    child_id bigint NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    CONSTRAINT pk_manifest_references PRIMARY KEY (repository_id, id),
    CONSTRAINT fk_manifest_references_repository_id_parent_id_manifests FOREIGN KEY (repository_id, parent_id) REFERENCES manifests (repository_id, id) ON DELETE CASCADE,
    CONSTRAINT fk_manifest_references_repository_id_child_id_manifests FOREIGN KEY (repository_id, child_id) REFERENCES manifests (repository_id, id) ON DELETE CASCADE,
    CONSTRAINT uq_manifest_references_repository_id_parent_id_child_id UNIQUE (repository_id, parent_id, child_id),
    CONSTRAINT ck_manifest_references_parent_id_child_id_differ CHECK (parent_id <> child_id)
)
PARTITION BY HASH (repository_id);
CREATE INDEX ix_manifest_references_repository_id_parent_id ON manifest_references (repository_id, parent_id);
CREATE INDEX ix_manifest_references_repository_id_child_id ON manifest_references (repository_id, child_id);

CREATE TABLE layers (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    repository_id bigint NOT NULL,
    manifest_id bigint NOT NULL,
    size bigint NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    media_type_id smallint NOT NULL,
    digest bytea NOT NULL,
    CONSTRAINT pk_layers PRIMARY KEY (repository_id, id),
    CONSTRAINT fk_layers_repository_id_manifest_id_manifests FOREIGN KEY (repository_id, manifest_id) REFERENCES manifests (repository_id, id) ON DELETE CASCADE,
    CONSTRAINT fk_layers_media_type_id_media_types FOREIGN KEY (media_type_id) REFERENCES media_types (id),
    CONSTRAINT fk_layers_digest_blobs FOREIGN KEY (digest) REFERENCES blobs (digest),
    CONSTRAINT uq_layers_repository_id_manifest_id_digest UNIQUE (repository_id, manifest_id, digest)
)
PARTITION BY HASH (repository_id);
CREATE INDEX ix_layers_repository_id_manifest_id ON layers (repository_id, manifest_id);
CREATE INDEX ix_layers_media_type_id ON layers (media_type_id);
CREATE INDEX ix_layers_digest ON layers (digest);

CREATE TABLE tags (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    repository_id bigint NOT NULL,
    manifest_id bigint NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    updated_at timestamp WITH time zone,
    name text NOT NULL,
    CONSTRAINT pk_tags PRIMARY KEY (repository_id, id),
    CONSTRAINT fk_tags_repository_id_manifest_id_manifests FOREIGN KEY (repository_id, manifest_id) REFERENCES manifests (repository_id, id) ON DELETE CASCADE,
    CONSTRAINT uq_tags_repository_id_name UNIQUE (repository_id, name),
    CONSTRAINT ck_tags_name_length CHECK ((char_length(name) <= 255))
)
PARTITION BY HASH (repository_id);
CREATE INDEX ix_tags_repository_id_manifest_id ON tags (repository_id, manifest_id);

CREATE TABLE blobs_layers (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    repository_id bigint NOT NULL,
    layer_id bigint NOT NULL,
    digest bytea NOT NULL,
    CONSTRAINT pk_blobs_layers PRIMARY KEY (digest, id),
    CONSTRAINT fk_blobs_layers_repository_id_layer_id_layers FOREIGN KEY (repository_id, layer_id) REFERENCES layers (repository_id, id) ON DELETE CASCADE,
    CONSTRAINT fk_blobs_layers_digest_blobs FOREIGN KEY (digest) REFERENCES blobs (digest) ON DELETE CASCADE,
    CONSTRAINT uq_blobs_layers_digest_layer_id UNIQUE (digest, layer_id)
)
PARTITION BY HASH (digest);

CREATE TABLE blobs_configurations (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    repository_id bigint NOT NULL,
    manifest_id bigint NOT NULL,
    digest bytea NOT NULL,
    CONSTRAINT pk_blobs_configurations PRIMARY KEY (digest, id),
    CONSTRAINT fk_blobs_configurations_repository_id_manifest_id_manifests FOREIGN KEY (repository_id, manifest_id) REFERENCES manifests (repository_id, id) ON DELETE CASCADE,
    CONSTRAINT fk_blobs_configurations_digest_blobs FOREIGN KEY (digest) REFERENCES blobs (digest) ON DELETE CASCADE,
    CONSTRAINT uq_blobs_configurations_digest_layer_id UNIQUE (digest, manifest_id)
)
PARTITION BY HASH (digest);

CREATE TABLE tmp_blobs_manifests (
    digest bytea NOT NULL,
    CONSTRAINT pk_tmp_blobs_manifests PRIMARY KEY (digest)
);

CREATE TABLE blob_review_queue (
    review_after timestamp with time zone NOT NULL DEFAULT now() + interval '1 day',
    review_count integer NOT NULL DEFAULT 0,
    digest bytea NOT NULL,
    CONSTRAINT pk_blob_review_queue PRIMARY KEY (digest)
);

CREATE SCHEMA partitions;

SET search_path = partitions;

CREATE TABLE blobs_default PARTITION OF public.blobs
FOR VALUES WITH (MODULUS 1, REMAINDER 0);

CREATE TABLE repository_blobs_default PARTITION OF public.repository_blobs
FOR VALUES WITH (MODULUS 1, REMAINDER 0);

CREATE TABLE manifests_default PARTITION OF public.manifests
FOR VALUES WITH (MODULUS 1, REMAINDER 0);

CREATE TABLE layers_default PARTITION OF public.layers
FOR VALUES WITH (MODULUS 1, REMAINDER 0);

CREATE TABLE manifest_references_default PARTITION OF public.manifest_references
FOR VALUES WITH (MODULUS 1, REMAINDER 0);

CREATE TABLE tags_default PARTITION OF public.tags
FOR VALUES WITH (MODULUS 1, REMAINDER 0);

CREATE TABLE blobs_layers_default PARTITION OF public.blobs_layers
FOR VALUES WITH (MODULUS 1, REMAINDER 0);

CREATE TABLE blobs_configurations_default PARTITION OF public.blobs_configurations
FOR VALUES WITH (MODULUS 1, REMAINDER 0);

SET search_path = public;
